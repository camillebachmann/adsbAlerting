#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QMainWindow>

#include <QTimer>
#include <QList>
#include <QFile>
#include <QProcess>
#include <QMessageBox>
#include <QSystemTrayIcon>

#include "aircraftlist.h"
#include "picture.h"
#include "settings.h"
#include "locations.h"

/*!
 * \file
 */

/*!
 * \brief The ColumnsType enum is an identifier for the columns in the list of "live" aircraft displayed in the UI.
 */
enum ColumnsType{IcaoClmn, ///< column containing the icao identifier.
                 CallsignClmn, ///< column containing the callsign (transmitted by ADS-B).
                 AltiClmn ///< column containing the aircraft altitude.
                };

namespace Ui {
class MainWindow;
}

/*!
 * \brief The MainWindow class is the main class of this application.
 * It displays detected aircraft and information about them, and provides an interfaces to handle alerts.
 * Settings and Locations are opened from this window.
 */
class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    /*!
     * \brief MainWindow consructor.
     * \param live is the list of AircraftADSB from which a message has been received not a while ago.
     * \param database is the list of AircraftADSB read from the database. When one of them is detected an alert is triggered.
     * \param settings is the UI window / data container for settings.
     * \param locations is the UI window / data container for locations.
     * \param parent is passed to QMainWindow constructor. Kept for future use.
     */
    explicit MainWindow(AircraftList *live, AircraftList *database, Settings *settings, Locations *locations, QWidget *parent = nullptr);
    ~MainWindow();

    /*!
     * \brief setInfoVisi opens / closes the side panel in which details about the selected aircraft are shown.
     * \param visible
     */
    void setInfoVisi(bool visible);

    /*!
     * \brief resetInfo resets values in the side panel.
     */
    void resetInfo();

    /*!
     * \brief connectionFailed activates the button to launch dump1090.
     */
    void connectionFailed();

    /*!
     * \brief connectionSucceeded disactivates the button to launch dump1090, since an instance is already running.
     */
    void connectionSucceeded();

    /*!
     * \brief raiseAlert triggers the alerting system (timed sound alarm) and activates the button to acknowledge the alert.
     */
    void raiseAlert(QString icao);

public slots:
    /*!
     * \brief aknowlegeAlerts sets all aircraft alert statuses to acknowledged, stops the alarm and disables the button to acknowledge alerts.
     */
    void aknowlegeAlerts();

    /*!
     * \brief triggerAlerts plays the alert sound if an alert is raised. Stops the alert timer if no alert is raised.
     */
    void triggerAlerts();

    /*!
     * \brief toggleMute changes mute status and changes the UI mute button accordingly.
     */
    void toggleMute();


    /*!
     * \brief filterAcfList display in the UI list only the aircraft present in the "interesting" aircraft database.
     */
    void filterAcfList();

    /*!
     * \brief redrawAcfList redraws UI aircraft list content, according to the filter.
     * It keeps the previous selection activated if the previously selected aircraft is still in the list.
     */
    void redrawAcfList();

    /*!
     * \brief newAcfSelected updates information coming from the database in the side panel.
     * No "live" information is set here.
     */
    void newAcfSelected();

    /*!
     * \brief updateListInfo is used to update information in the list.
     * \param icao is used as a reference to know what line to modify. A new line is created if needed.
     * \param column is column identifier
     * \param value is the value to be set
     */
    void updateListInfo(QString icao, ColumnsType column, QString value);


    /*!
     * \brief updateLocation changes the text in the "change location" button, to display the name of the current Location.
     */
    void updateLocation();


    /*!
     * \brief reloadDatabase reloads aircraft information from the database defined in Settings.
     */
    void reloadDatabase();

    /*!
     * \brief addToDatabase adds the selected aircraft's icao identifier to the database.
     */
    void addToDatabase();

    /*!
     * \brief toggleInfoVisi is the toggle action for setInfoVisi(bool visible).
     */
    void toggleInfoVisi();

    /*!
     * \brief resizeWindow is called when the window is resized.
     */
    void resizeWindow();

    /*!
     * \brief updateLiveInfo updates live data in the side panel.
     */
    void updateLiveInfo();


    /*!
     * \brief lauchDump1090 launches dump1090 with the settings defined in Settings.
     */
    void lauchDump1090();

    /*!
     * \brief readDumpOutput reads console messages generated by dump1090. This is used to catch errors.
     */
    void readDumpOutput();


    /*!
     * \brief LaunchWebForInfo opens a web page from opensky-network to know more about the selected aircraft.
     */
    void LaunchWebForInfo();

private:
    Ui::MainWindow *ui;

    Settings *settings;
    Locations *locations;

    QTimer resizeTimer;
    int smallWidth;

    Picture picture;

    AircraftList *interestingAcf; // From database
    AircraftList *seenAcf; // From ADSB messages

    bool showingOnlyRecognized = false;
    QString selectedIcao = "";

    QTimer alarmTimer;
    const int alarmIntervalMS = 5000;
    QIcon soundIcon;
    QIcon mutedIcon;
    bool muted = false;

    QTimer liveTimer;

    QProcess process;

    QMessageBox msgBox;

    QSystemTrayIcon trayIcon;
    QIcon notificationIcon;
};

#endif // MAINWINDOW_H
